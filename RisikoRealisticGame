import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.List;
import java.util.function.BiConsumer;
import javax.swing.*;

public class RisikoRealisticGame {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Risiko Weltkarte");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(1200, 800);
            
            RisikoMapPanel gamePanel = new RisikoMapPanel();
            frame.add(gamePanel);
            
            frame.setVisible(true);
        });
    }
}

class RisikoMapPanel extends JPanel {
    private Map<String, Territory> territories = new HashMap<>();
    private Territory selectedTerritory = null;
    private Territory previousSelectedTerritory = null;
    private BufferedImage backgroundImage = null;
    private Map<String, Set<String>> adjacentTerritories = new HashMap<>();
    private List<Connection> connections = new ArrayList<>();
    
    // Kontinentale Farbschemata entsprechend dem Bild
    private static final Color NORTH_AMERICA_COLOR = new Color(233, 185, 144, 255);
    private static final Color SOUTH_AMERICA_COLOR = new Color(240, 230, 140, 255);
    private static final Color EUROPE_COLOR = new Color(204, 204, 230, 255);
    private static final Color AFRICA_COLOR = new Color(230, 210, 180, 255);
    private static final Color ASIA_COLOR = new Color(230, 255, 200, 255);
    private static final Color AUSTRALIA_COLOR = new Color(255, 180, 230, 255);
    private static final Color BACKGROUND_COLOR = new Color(173, 216, 255); // Pergament-Hintergrund
    
    public RisikoMapPanel() {
        setBackground(BACKGROUND_COLOR);
        
        
        
        // Kontinente und Länder definieren
        defineAllTerritories();
        
        // Nachbarschaftsbeziehungen aufbauen
        defineAdjacentTerritories();
        
        // Mausklick-Handler
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                handleTerritoryClick(e.getPoint());
            }
        });
        
        // Tooltips aktivieren
        ToolTipManager.sharedInstance().setInitialDelay(300);
        setToolTipText("");
    }
    
    
    private void defineAllTerritories() {
        // NORDAMERIKA - Territorien neu definiert mit klaren Grenzen
        defineNorthAmerica();
        
        // SÜDAMERIKA - Territorien neu definiert mit klaren Grenzen
        defineSouthAmerica();
        
        // EUROPA - Territorien neu definiert mit klaren Grenzen
        defineEurope();
        
        // AFRIKA - Territorien neu definiert mit klaren Grenzen
        defineAfrica();
        
        // ASIEN - Territorien neu definiert mit klaren Grenzen
        defineAsia();
        
        // AUSTRALIEN - Territorien neu definiert mit klaren Grenzen
        defineAustralia();
    }
    
    private void defineNorthAmerica() {
        // NORDAMERIKA - Territories adjusted to form a continuous continent
    
// Alaska - Left side pentagon shape
addTerritory("Alaska", createPolygon(new int[]{ 69, 67, 65, 63, 61, 59, 57, 54, 52, 50, 47, 43, 41, 39, 37, 35, 33, 32, 31, 29, 28, 28, 28, 28, 26, 24, 22, 19, 18, 18, 19, 20, 21, 22, 23, 24, 24, 22, 20, 19, 17, 15, 13, 12, 12, 12, 12, 13, 14, 16, 18, 20, 21, 23, 23, 23, 22, 20, 17, 14, 12, 10, 8, 8, 8, 8, 9, 10, 11, 12, 13, 13, 12, 12, 13, 13, 15, 16, 18, 19, 20, 21, 22, 22, 20, 18, 16, 15, 15, 15, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 34, 34, 35, 36, 37, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 62, 64, 66, 66, 67, 69, 69, 70, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 82, 81, 80, 79, 79, 79, 79, 79, 78, 77, 76, 76, 74, 72, 70, 68, 67, 67, 67, 67, 67, 67, 68, 68, 69, 69, 69, 69
}, new int[]{ 57, 57, 56, 55, 54, 54, 54, 54, 52, 51, 49, 48, 48, 48, 49, 50, 50, 52, 53, 53, 55, 56, 58, 59, 59, 58, 57, 56, 57, 59, 61, 62, 63, 65, 66, 67, 68, 68, 67, 67, 66, 66, 67, 68, 70, 72, 74, 76, 77, 77, 77, 77, 77, 77, 78, 79, 80, 80, 80, 80, 80, 82, 84, 86, 90, 92, 93, 94, 96, 97, 97, 99, 100, 101, 102, 103, 103, 105, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 120, 120, 120, 120, 120, 118, 117, 116, 114, 112, 111, 110, 109, 106, 105, 105, 105, 106, 107, 107, 107, 106, 105, 104, 102, 100, 99, 98, 99, 100, 101, 102, 103, 103, 104, 104, 104, 104, 104, 105, 107, 109, 110, 111, 111, 112, 112, 114, 116, 119, 121, 122, 125, 126, 127, 126, 125, 123, 121, 120, 118, 116, 115, 113, 111, 108, 106, 103, 102, 100, 97, 95, 95, 95, 95, 93, 90, 86, 83, 81, 78, 76, 73, 70, 69, 66, 62, 58}), NORTH_AMERICA_COLOR);

// Northwest Territory - Long territory with shared border with Alaska
addTerritory("Nordwest-Territorium", createPolygon(new int[]{ 166, 164, 162, 160, 158, 156, 154, 152, 149, 147, 144, 142, 140, 137, 135, 132, 130, 126, 123, 120, 117, 114, 111, 108, 105, 103, 101, 99, 94, 77, 75, 74, 72, 69, 68, 68, 67, 67, 67, 67, 68, 68, 69, 69, 70, 71, 73, 75, 77, 78, 80, 80, 81, 83, 85, 87, 89, 91, 92, 93, 95, 97, 98, 100, 101, 102, 104, 106, 108, 109, 110, 112, 113, 113, 114, 116, 118, 120, 121, 123, 126, 130, 131, 135, 138, 140, 141, 142, 144, 145, 148, 149, 150, 153, 158, 158, 158, 159, 160, 161, 163, 165, 167, 167, 168, 168, 168, 168, 168, 171, 172, 174, 176, 178, 179, 182, 185, 186, 187, 186, 185, 182, 181, 181, 182, 182, 184, 185, 187, 189, 193, 195, 197, 199, 200, 200, 200, 199, 197, 195, 193, 190, 188, 185, 183, 183, 183, 182, 179, 176, 171, 170, 167, 167
}, new int[]{ 99, 98, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 94, 95, 95, 95, 95, 95, 95, 95, 94, 93, 91, 88, 81, 77, 71, 71, 70, 68, 56, 56, 56, 56, 56, 54, 55, 56, 57, 59, 59, 58, 58, 58, 58, 59, 58, 58, 57, 56, 55, 54, 53, 52, 52, 53, 53, 51, 52, 54, 55, 57, 58, 57, 56, 58, 59, 60, 64, 65, 66, 66, 65, 61, 61, 59, 58, 58, 59, 60, 61, 61, 59, 57, 55, 54, 54, 55, 57, 59, 60, 60, 57, 53, 49, 46, 43, 42, 40, 37, 36, 35, 34, 34, 35, 36, 38, 39, 43, 47, 50, 55, 57, 60, 61, 60, 59, 58, 58, 58, 60, 63, 65, 68, 70, 72, 73, 76, 78, 78, 78, 80, 82, 84, 86, 88, 88, 91, 93, 96, 98}), NORTH_AMERICA_COLOR);

addTerritory("Grönland", createPolygon(new int[]{ 257, 263, 263, 267, 268, 275, 282, 289, 292, 300, 300, 306, 307, 303, 306, 308, 310, 308, 309, 308, 311, 315, 317, 311, 304, 300, 294, 293, 297, 300, 294, 287, 279, 273, 267, 262, 257, 251, 248, 244, 241, 234, 230, 227, 221, 218, 218, 217, 213, 212, 214, 210, 210, 214, 218, 222, 225, 230, 233, 236, 239, 241, 242, 239, 242, 245, 243, 242, 243, 244, 245, 247, 250, 254
}, new int[]{ 113, 108, 99, 94, 87, 85, 81, 74, 70, 69, 64, 64, 60, 56, 54, 50, 46, 42, 35, 29, 22, 20, 15, 14, 16, 18, 19, 15, 14, 11, 8, 8, 7, 5, 7, 11, 14, 17, 20, 23, 21, 20, 23, 27, 28, 31, 34, 36, 38, 41, 44, 47, 51, 50, 51, 51, 50, 51, 54, 57, 60, 64, 68, 72, 74, 77, 80, 84, 89, 93, 99, 103, 107, 110}), NORTH_AMERICA_COLOR);


// Alberta - Non-rectangular shape with connection to Ontario
addTerritory("Alberta", createPolygon(new int[]{ 143, 143, 140, 140, 139, 84, 83, 82, 82, 83, 83, 83, 81, 80, 78, 76, 76, 77, 78, 80, 80, 82, 82, 82, 81, 79, 78, 79, 79, 79, 78, 76, 76, 86, 103, 105, 140, 141 },
new int[]{ 96, 113, 116, 137, 150, 151, 149, 148, 145, 143, 141, 139, 137, 135, 133, 131, 128, 126, 125, 123, 121, 119, 118, 116, 115, 114, 112, 111, 108, 104, 102, 100, 96, 95, 95, 96, 96, 96 }), NORTH_AMERICA_COLOR);

// Ontario - Adjusted to ensure proper connection with Alberta
addTerritory("Ontario", createPolygon(new int[]{ 165, 161, 156, 151, 147, 144, 142, 143, 143, 141, 140, 140, 140, 140, 140, 140, 140, 140, 145, 149, 154, 159, 163, 165, 167, 171, 174, 176, 178, 178, 181, 184, 186, 188, 189, 189, 189, 189, 189, 187, 187, 188, 187, 183, 177, 173, 168, 166, 165, 165
}, new int[]{ 99, 97, 97, 96, 96, 97, 101, 107, 112, 115, 120, 125, 129, 133, 137, 143, 147, 150, 150, 150, 150, 150, 150, 152, 151, 150, 150, 153, 155, 157, 160, 162, 165, 163, 159, 155, 150, 146, 141, 137, 133, 127, 124, 123, 121, 120, 119, 115, 109, 104}), NORTH_AMERICA_COLOR);

addTerritory("Quebec", createPolygon(new int[]{ 203, 206, 210, 214, 218, 222, 223, 223, 224, 224, 225, 227, 230, 233, 236, 236, 236, 239, 240, 240, 242, 246, 248, 248, 252, 253, 253, 252, 247, 243, 238, 234, 228, 229, 230, 231, 235, 237, 236, 233, 231, 230, 226, 221, 221, 221, 223, 222, 218, 213, 213, 208, 203, 200, 197, 191, 189, 189, 189, 189, 191, 192, 191, 192, 195, 200, 200, 198, 198, 199, 202, 202
}, new int[]{ 91, 90, 91, 91, 91, 92, 95, 98, 103, 106, 107, 105, 101, 101, 103, 106, 108, 110, 113, 117, 120, 121, 123, 127, 130, 132, 137, 141, 144, 145, 149, 150, 150, 154, 157, 162, 162, 164, 168, 172, 175, 180, 183, 182, 178, 172, 167, 162, 160, 162, 164, 168, 168, 167, 164, 164, 161, 154, 149, 142, 138, 134, 129, 123, 122, 121, 116, 112, 106, 101, 100, 94}), NORTH_AMERICA_COLOR);

// Western United States - Left bottom territory
addTerritory("Western United States", createPolygon(new int[]{ 85, 154, 154, 154, 153, 153, 151, 151, 149, 147, 144, 143, 141, 140, 140, 139, 139, 137, 136, 134, 133, 133, 132, 131, 131, 131, 130, 130, 128, 127, 126, 126, 126, 126, 126, 126, 126, 124, 122, 120, 119, 118, 118, 116, 115, 102, 100, 99, 97, 95, 92, 90, 87, 85, 83, 83, 81, 80, 79, 79, 79, 79, 79, 80, 79, 80, 81, 82, 82, 81, 81, 81, 82, 82, 81, 83, 84, 86, 86, 85 },
new int[]{ 150, 150, 151, 189, 190, 191, 192, 193, 193, 193, 193, 193, 192, 194, 196, 198, 200, 201, 202, 202, 204, 206, 207, 208, 210, 212, 214, 216, 216, 217, 218, 220, 221, 223, 225, 226, 227, 227, 227, 227, 226, 225, 223, 222, 221, 221, 219, 218, 215, 215, 214, 213, 212, 210, 208, 205, 203, 201, 198, 195, 193, 190, 187, 184, 182, 181, 180, 178, 176, 174, 172, 169, 167, 164, 160, 160, 158, 157, 155, 152 }), NORTH_AMERICA_COLOR);

// Eastern United States - Right bottom territory with clean border
addTerritory("Eastern United States", createPolygon(new int[]{ 155, 155, 156, 157, 159, 161, 163, 164, 164, 163, 162, 161, 161, 162, 163, 165, 167, 168, 171, 172, 172, 172, 171, 171, 169, 168, 168, 167, 167, 168, 169, 171, 172, 173, 173, 173, 173, 173, 174, 175, 176, 176, 176, 177, 177, 178, 179, 181, 182, 183, 185, 187, 188, 188, 190, 192, 194, 196, 197, 199, 200, 201, 202, 209, 211, 212, 213, 214, 214, 216, 217, 218, 221, 222, 222, 222, 222, 222, 221, 221, 220, 218, 217, 217, 216, 215, 214, 214, 213, 212, 211, 210, 208, 207, 207, 205, 204, 204, 204, 205, 204, 203, 202, 199, 196, 193, 190, 188, 188, 189, 189, 189, 189, 189, 187, 186, 184, 182, 180, 179, 177, 177, 176, 176, 176, 176, 174, 173, 171, 168, 166, 163, 162, 159, 158, 155, 153, 150, 147, 144, 142, 141, 139, 138, 137, 135, 133, 132, 130, 129, 128, 127, 126, 127, 128, 129, 130, 131, 131, 131, 132, 133, 134, 136, 137, 138, 140, 140, 141, 151, 152, 154 },
new int[]{ 189, 150, 150, 150, 150, 150, 151, 152, 153, 154, 155, 157, 158, 159, 159, 159, 160, 160, 160, 161, 162, 164, 165, 166, 168, 170, 173, 175, 177, 179, 179, 178, 178, 177, 175, 173, 171, 169, 168, 167, 168, 169, 171, 172, 173, 175, 175, 174, 173, 170, 169, 168, 167, 166, 165, 164, 165, 164, 165, 165, 166, 167, 168, 168, 167, 166, 165, 164, 162, 161, 161, 160, 161, 162, 164, 166, 168, 171, 174, 175, 176, 177, 179, 181, 183, 185, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 201, 203, 205, 206, 208, 210, 212, 214, 217, 219, 222, 226, 229, 231, 235, 237, 240, 242, 243, 245, 246, 246, 247, 245, 243, 241, 237, 234, 231, 230, 229, 231, 231, 231, 230, 229, 228, 228, 229, 230, 230, 230, 230, 230, 231, 232, 233, 234, 235, 235, 236, 235, 233, 230, 229, 227, 218, 218, 217, 216, 215, 213, 210, 208, 206, 206, 203, 203, 202, 200, 200, 194, 192, 192, 191, 190 }), NORTH_AMERICA_COLOR);

// Central America - Southern extension with no overlaps
addTerritory("Central America", createPolygon(new int[]{ 86, 87, 88, 89, 91, 91, 93, 95, 98, 101, 102, 116, 116, 117, 118, 120, 120, 126, 128, 129, 130, 131, 132, 133, 133, 133, 133, 133, 132, 130, 130, 130, 130, 131, 131, 131, 131, 133, 135, 137, 138, 140, 140, 141, 142, 143, 146, 148, 151, 153, 153, 153, 153, 152, 151, 149, 147, 147, 147, 149, 150, 152, 152, 152, 151, 149, 149, 147, 146, 145, 145, 147, 149, 152, 154, 155, 155, 154, 152, 150, 150, 148, 147, 146, 144, 141, 139, 136, 134, 132, 131, 131, 130, 129, 126, 127, 125, 123, 120, 117, 114, 112, 110, 110, 110, 110, 110, 109, 107, 105, 103, 102, 101, 100, 97, 97, 96, 96, 96, 96, 96, 98, 99, 100, 101, 101, 102, 103, 104, 104, 104, 104, 102, 100, 99, 97, 96, 96, 94, 93, 92, 90, 89, 89, 88, 88, 88, 87, 86, 85 },
new int[]{ 211, 211, 212, 212, 213, 214, 214, 215, 217, 220, 221, 221, 222, 223, 225, 226, 227, 227, 229, 232, 233, 234, 235, 236, 238, 240, 242, 243, 245, 246, 248, 250, 251, 251, 253, 254, 256, 256, 256, 256, 256, 256, 254, 252, 251, 251, 249, 249, 249, 249, 252, 255, 258, 259, 261, 261, 262, 264, 265, 266, 268, 269, 272, 274, 276, 277, 279, 281, 283, 285, 286, 287, 287, 287, 287, 287, 288, 290, 292, 294, 295, 296, 298, 301, 301, 300, 299, 297, 294, 292, 289, 282, 281, 279, 279, 271, 270, 268, 267, 266, 265, 263, 261, 258, 256, 253, 251, 249, 246, 243, 240, 237, 235, 232, 228, 226, 225, 226, 228, 230, 232, 235, 237, 239, 241, 243, 246, 248, 249, 252, 254, 256, 256, 254, 251, 248, 246, 244, 243, 240, 238, 237, 233, 231, 229, 225, 222, 219, 216, 213 }), NORTH_AMERICA_COLOR);
    }
    
    private void defineSouthAmerica() {
        // Venezuela - adjusted for better connections
        addTerritory("Venezuela", createPolygon(new int[]{ 142, 144, 146, 146, 145, 145, 149, 153, 155, 157, 163, 167, 170, 172, 174, 177, 179, 183, 184, 201, 202, 205, 207, 209, 213, 215, 219, 220, 234, 236, 237, 237, 234, 232, 229, 227, 225, 224, 210, 208, 206, 205, 204, 203, 201, 200, 198, 196, 194, 192, 192, 192, 192, 190, 187, 184, 181, 177, 175, 175, 176, 176, 175, 170, 167, 165, 161, 159, 156, 154, 150, 148, 145, 143 },
            new int[]{ 314, 312, 310, 305, 302, 299, 295, 292, 288, 286, 282, 280, 277, 278, 279, 280, 282, 284, 285, 285, 286, 286, 289, 293, 295, 298, 300, 301, 302, 302, 304, 306, 310, 312, 313, 315, 316, 317, 317, 316, 314, 310, 307, 307, 308, 310, 312, 311, 311, 311, 313, 317, 318, 319, 319, 319, 317, 317, 319, 322, 324, 328, 332, 332, 331, 329, 329, 327, 326, 324, 322, 320, 318, 316 }), SOUTH_AMERICA_COLOR);

// Peru - adjusted to connect cleanly with neighbors
addTerritory("Peru", createPolygon(new int[]{ 186, 183, 180, 177, 172, 170, 167, 162, 158, 153, 151, 146, 144, 143, 139, 135, 133, 132, 134, 136, 139, 140, 142, 144, 146, 149, 153, 156, 160, 167, 167, 165, 161, 159, 158, 162, 166, 167, 170, 173, 174, 170, 170, 172, 177, 187, 191, 195, 200, 201, 206, 208, 211, 213, 215, 216, 218, 218, 221, 223, 225, 225, 226, 227, 229, 228, 226, 225, 222, 219, 216, 215, 216, 216, 211, 208, 206, 204, 203, 196, 194, 192, 190, 189, 188, 187 },
new int[]{ 398, 395, 392, 389, 386, 383, 381, 377, 375, 372, 367, 362, 357, 355, 350, 347, 344, 328, 324, 321, 318, 315, 314, 316, 319, 321, 323, 325, 327, 330, 332, 335, 338, 341, 346, 348, 352, 353, 350, 351, 353, 355, 358, 359, 359, 355, 358, 361, 364, 366, 366, 369, 372, 375, 378, 381, 383, 392, 394, 394, 396, 398, 401, 404, 405, 409, 410, 411, 413, 415, 415, 412, 411, 404, 403, 402, 401, 398, 397, 396, 395, 393, 393, 394, 396, 397 }), SOUTH_AMERICA_COLOR);

// Brasilien - adjusted to ensure continuous connection
addTerritory("Brasilien", createPolygon(new int[]{ 168, 170, 175, 175, 176, 176, 174, 174, 176, 178, 181, 183, 183, 190, 192, 192, 194, 196, 198, 200, 203, 204, 205, 206, 206, 210, 211, 222, 224, 227, 229, 232, 234, 236, 238, 240, 243, 244, 246, 248, 249, 256, 261, 272, 277, 281, 285, 290, 291, 294, 294, 293, 292, 290, 286, 285, 282, 279, 278, 276, 275, 273, 271, 269, 268, 266, 259, 256, 254, 252, 249, 248, 246, 244, 243, 241, 239, 237, 237, 234, 233, 231, 231, 229, 227, 226, 223, 224, 227, 228, 229, 229, 227, 226, 225, 222, 219, 218, 217, 213, 212, 209, 208, 207, 201, 198, 196, 194, 191, 189, 187, 185, 182, 180, 178, 176, 172, 170, 170, 172, 173, 173, 170, 169, 167, 166, 164, 161, 159, 158, 159, 160, 162, 165, 166, 167 },
new int[]{ 332, 332, 332, 330, 327, 324, 322, 320, 318, 316, 316, 318, 319, 319, 318, 310, 310, 311, 312, 310, 308, 308, 309, 312, 313, 316, 317, 317, 316, 316, 314, 312, 310, 307, 307, 310, 312, 314, 317, 320, 322, 322, 326, 327, 327, 329, 332, 336, 338, 341, 344, 347, 350, 352, 355, 357, 361, 363, 376, 379, 382, 385, 389, 392, 395, 397, 398, 399, 400, 402, 404, 415, 418, 422, 425, 429, 432, 435, 436, 436, 435, 433, 428, 427, 425, 420, 420, 416, 414, 412, 409, 406, 403, 400, 396, 394, 393, 383, 382, 375, 372, 371, 368, 366, 365, 363, 362, 360, 358, 356, 355, 355, 356, 357, 358, 359, 359, 358, 356, 354, 354, 350, 350, 351, 352, 352, 350, 347, 346, 343, 341, 339, 338, 336, 334, 333 }), SOUTH_AMERICA_COLOR);

// Argentinien - adjusted to ensure continuous connection
addTerritory("Argentinien", createPolygon(new int[]{ 172, 175, 177, 181, 183, 185, 187, 189, 190, 192, 194, 195, 203, 204, 206, 207, 210, 210, 216, 217, 216, 215, 215, 218, 220, 223, 225, 227, 228, 228, 227, 225, 223, 223, 226, 226, 228, 230, 231, 231, 234, 236, 235, 234, 232, 230, 228, 224, 225, 226, 227, 227, 224, 221, 219, 217, 212, 211, 209, 208, 203, 203, 203, 204, 204, 200, 198, 199, 202, 204, 204, 201, 200, 198, 198, 200, 204, 207, 206, 204, 200, 196, 193, 189, 186, 184, 180, 178, 177, 172, 172, 174, 175, 177, 177, 173, 172, 171, 170, 168, 169, 171, 175, 175, 172, 172, 174, 174, 173, 173, 172, 172 },
new int[]{ 387, 389, 391, 393, 396, 398, 398, 395, 393, 393, 395, 396, 396, 398, 400, 402, 402, 403, 403, 411, 412, 414, 415, 415, 414, 413, 411, 410, 410, 412, 415, 416, 417, 420, 420, 424, 426, 429, 429, 433, 435, 437, 440, 441, 444, 444, 445, 445, 446, 447, 448, 453, 456, 459, 460, 461, 462, 466, 467, 468, 468, 471, 475, 479, 480, 484, 488, 490, 491, 492, 494, 498, 503, 509, 513, 515, 518, 520, 522, 523, 524, 525, 524, 521, 518, 514, 510, 507, 495, 492, 490, 486, 483, 481, 474, 472, 468, 463, 457, 454, 449, 444, 441, 432, 429, 420, 417, 413, 409, 403, 400, 389 }), SOUTH_AMERICA_COLOR);
    }
    
    private void defineEurope() {
        // Island
        addTerritory("Island", createPolygon(new int[]{ 317, 318, 320, 322, 324, 325, 327, 327, 334, 337, 339, 343, 347, 349, 353, 356, 358, 359, 360, 359, 357, 356, 354, 352, 348, 344, 341, 339, 338, 332, 329, 326, 324, 317, 316, 317, 317, 314, 311, 312, 314, 313, 310, 312, 314, 315 },
            new int[]{ 89, 87, 87, 89, 91, 93, 93, 91, 90, 90, 89, 85, 85, 88, 91, 93, 96, 98, 102, 103, 106, 109, 110, 111, 114, 116, 117, 119, 120, 121, 120, 119, 117, 117, 115, 111, 108, 107, 105, 104, 102, 99, 97, 95, 93, 90 }), EUROPE_COLOR);

// Skandinavien
addTerritory("Skandinavien", createPolygon(new int[]{ 367, 366, 365, 364, 364, 365, 368, 371, 374, 380, 383, 385, 387, 387, 390, 393, 395, 392, 393, 395, 398, 399, 401, 401, 402, 404, 406, 407, 409, 413, 417, 418, 421, 423, 429, 432, 435, 434, 432, 431, 431, 431, 432, 432, 432, 433, 436, 435, 432, 430, 427, 424, 420, 417, 415, 413, 413, 413, 414, 414, 415, 412, 410, 410, 409, 407, 407, 408, 408, 408, 407, 404, 402, 402, 403, 400, 398, 396, 394, 390, 388, 388, 387, 384, 384, 382, 380, 378, 373, 371, 370, 368 },
new int[]{ 124, 120, 118, 115, 108, 105, 101, 99, 96, 93, 90, 87, 84, 81, 78, 76, 75, 74, 71, 69, 68, 69, 69, 70, 67, 68, 68, 64, 61, 60, 58, 60, 60, 59, 58, 60, 62, 65, 68, 73, 78, 83, 90, 95, 100, 104, 107, 111, 113, 115, 116, 117, 117, 118, 117, 115, 112, 109, 106, 103, 100, 99, 101, 103, 106, 109, 113, 117, 120, 122, 125, 128, 130, 135, 138, 140, 142, 143, 143, 143, 141, 140, 135, 132, 130, 130, 132, 133, 133, 132, 131, 125 }), EUROPE_COLOR);

// Great Britain
addTerritory("Great Britain", createPolygon(new int[]{ 288, 288, 287, 289, 293, 296, 298, 300, 304, 307, 309, 311, 311, 309, 306, 307, 308, 306, 308, 308, 311, 313, 316, 319, 321, 323, 324, 325, 325, 329, 331, 331, 330, 328, 325, 324, 327, 329, 331, 334, 335, 337, 340, 343, 347, 349, 348, 346, 345, 345, 346, 346, 345, 343, 338, 333, 329, 325, 321, 320, 318, 315, 313, 311, 308, 306, 307, 309, 312, 314, 316, 316, 314, 311, 310, 311, 312, 314, 314, 312, 311, 309, 308, 307, 307, 306, 305, 304, 303, 298, 298, 286, 285, 282, 279, 280, 281, 283, 286, 287 },
new int[]{ 178, 174, 170, 166, 164, 160, 157, 155, 155, 155, 156, 156, 153, 152, 151, 150, 147, 141, 138, 133, 130, 127, 126, 125, 124, 125, 128, 131, 133, 133, 134, 138, 142, 144, 147, 150, 152, 153, 155, 157, 160, 163, 165, 168, 171, 173, 177, 179, 181, 183, 185, 187, 188, 190, 191, 192, 192, 192, 192, 194, 196, 196, 196, 198, 198, 196, 194, 192, 190, 188, 188, 185, 185, 185, 183, 182, 179, 178, 176, 175, 173, 174, 177, 180, 183, 187, 190, 192, 194, 194, 195, 195, 193, 191, 189, 186, 184, 181, 180, 179 }), EUROPE_COLOR);

// Western Europe
addTerritory("Western Europe", createPolygon(new int[]{ 319, 319, 320, 323, 328, 331, 333, 335, 339, 343, 345, 345, 348, 351, 355, 356, 357, 360, 362, 363, 363, 365, 365, 364, 364, 364, 361, 363, 364, 364, 364, 366, 368, 367, 366, 364, 361, 359, 358, 356, 355, 355, 356, 358, 357, 355, 356, 357, 357, 356, 354, 352, 350, 349, 347, 344, 342, 340, 337, 334, 332, 329, 326, 322, 318, 315, 311, 309, 306, 304, 305, 307, 309, 310, 310, 309, 306, 304, 303, 304, 307, 310, 312, 315, 318, 323, 325, 328, 328, 328, 326, 324, 322, 320 },
new int[]{ 212, 208, 206, 205, 205, 204, 204, 200, 199, 199, 199, 195, 192, 192, 190, 193, 194, 197, 199, 202, 205, 207, 210, 215, 218, 219, 222, 223, 225, 229, 232, 234, 236, 238, 240, 241, 241, 240, 237, 237, 239, 242, 244, 247, 249, 252, 254, 257, 260, 265, 267, 270, 272, 275, 276, 277, 280, 281, 282, 282, 281, 278, 277, 276, 276, 276, 275, 273, 270, 268, 264, 261, 258, 255, 253, 248, 245, 242, 239, 237, 235, 232, 232, 233, 235, 234, 233, 231, 226, 224, 221, 218, 217, 214 }), EUROPE_COLOR);

// Northern Europe - Previously adjusted to avoid overlap with Ukraine
addTerritory("Northern Europe", createPolygon(new int[]{ 358, 360, 362, 365, 366, 368, 372, 375, 376, 377, 375, 376, 378, 381, 383, 385, 386, 387, 386, 387, 389, 394, 399, 407, 412, 416, 419, 422, 425, 424, 426, 426, 429, 430, 429, 427, 425, 424, 422, 418, 417, 417, 418, 416, 414, 412, 411, 410, 411, 411, 402, 401, 400, 401, 401, 399, 390, 389, 387, 386, 386, 384, 378, 377, 374, 370, 367, 365, 363, 361, 358, 356, 355, 356, 357, 357 },
new int[]{ 177, 175, 173, 171, 167, 166, 163, 159, 153, 146, 145, 141, 138, 136, 137, 139, 142, 145, 148, 150, 150, 149, 147, 147, 147, 148, 150, 152, 154, 161, 163, 167, 168, 171, 174, 178, 184, 185, 186, 186, 189, 191, 192, 194, 197, 200, 202, 206, 210, 211, 211, 210, 204, 203, 199, 199, 198, 199, 201, 204, 206, 207, 207, 209, 209, 207, 208, 207, 201, 198, 196, 193, 190, 188, 185, 179 }), EUROPE_COLOR);

// Southern Europe - Further adjusted to completely avoid overlap with Ukraine
addTerritory("Southern Europe", createPolygon(new int[]{ 364, 364, 361, 364, 364, 364, 365, 368, 372, 374, 377, 379, 384, 386, 386, 389, 390, 399, 401, 401, 400, 400, 401, 403, 408, 412, 411, 410, 413, 415, 418, 422, 424, 426, 427, 429, 429, 431, 433, 435, 435, 434, 432, 429, 427, 425, 423, 422, 422, 419, 416, 416, 418, 421, 421, 419, 421, 421, 418, 415, 412, 409, 408, 406, 406, 402, 401, 400, 400, 399, 396, 394, 391, 390, 389, 391, 393, 394, 396, 397, 398, 397, 396, 394, 393, 391, 391, 392, 392, 390, 386, 384, 379, 376, 372, 369, 367, 369, 373, 376, 379, 380, 380, 377, 375, 372, 370, 370, 370, 368, 367, 365 },
new int[]{ 232, 225, 222, 219, 212, 212, 209, 208, 208, 209, 209, 207, 207, 206, 202, 200, 199, 198, 200, 203, 206, 209, 210, 210, 211, 211, 207, 201, 198, 195, 193, 191, 193, 196, 198, 201, 214, 218, 219, 219, 223, 228, 231, 233, 236, 240, 246, 250, 252, 253, 253, 256, 258, 260, 263, 265, 267, 271, 272, 272, 272, 271, 268, 267, 259, 253, 250, 247, 243, 240, 239, 237, 236, 237, 239, 240, 242, 244, 246, 249, 252, 254, 255, 253, 252, 252, 254, 257, 259, 261, 264, 266, 268, 268, 267, 265, 262, 261, 261, 260, 260, 256, 253, 250, 247, 244, 244, 238, 237, 237, 235, 234 }), EUROPE_COLOR);

addTerritory("Ukraine", createPolygon(new int[]{ 414, 413, 412, 413, 413, 415, 416, 418, 419, 421, 423, 424, 423, 420, 418, 418, 420, 424, 427, 428, 429, 432, 434, 435, 435, 434, 433, 432, 432, 431, 432, 431, 433, 434, 435, 437, 441, 446, 452, 457, 460, 464, 464, 465, 465, 464, 461, 458, 455, 451, 447, 445, 444, 444, 445, 446, 448, 450, 451, 452, 454, 455, 455, 454, 455, 457, 459, 461, 464, 465, 466, 469, 471, 471, 470, 469, 469, 469, 472, 476, 479, 478, 483, 486, 488, 491, 493, 496, 500, 502, 505, 507, 511, 514, 518, 522, 525, 528, 529, 528, 527, 523, 523, 523, 523, 524, 524, 525, 523, 523, 524, 525, 523, 522, 523, 526, 529, 530, 529, 527, 526, 528, 529, 529, 529, 527, 523, 521, 519, 515, 513, 510, 507, 507, 505, 503, 500, 497, 496, 493, 491, 490, 490, 487, 487, 489, 491, 493, 495, 494, 490, 489, 491, 493, 495, 497, 499, 499, 497, 497, 494, 490, 488, 485, 482, 478, 477, 472, 471, 466, 464, 460, 459, 460, 461, 464, 462, 459, 457, 454, 453, 454, 455, 454, 452, 449, 446, 445, 443, 440, 438, 437, 433, 431, 429, 428, 429, 427, 424, 421, 418, 417, 418, 422, 422, 425, 426, 427, 428, 430, 429, 427, 424, 424, 421, 417, 415 },
new int[]{ 147, 144, 141, 138, 135, 132, 130, 130, 132, 134, 134, 131, 130, 128, 124, 121, 120, 120, 120, 118, 116, 114, 112, 111, 107, 104, 100, 93, 88, 80, 73, 70, 67, 63, 62, 63, 63, 63, 64, 65, 66, 68, 70, 73, 76, 78, 78, 79, 80, 80, 80, 80, 80, 81, 82, 83, 85, 87, 90, 91, 91, 91, 89, 87, 85, 85, 86, 87, 87, 85, 83, 81, 80, 79, 77, 75, 71, 67, 67, 68, 71, 73, 72, 70, 68, 66, 64, 62, 62, 63, 64, 63, 61, 60, 61, 62, 65, 68, 73, 76, 82, 84, 88, 92, 96, 100, 104, 107, 109, 113, 116, 120, 124, 126, 128, 130, 131, 134, 137, 138, 140, 142, 145, 148, 150, 151, 152, 154, 156, 156, 154, 154, 155, 158, 158, 158, 158, 160, 161, 161, 163, 166, 169, 171, 180, 185, 188, 192, 194, 196, 199, 203, 206, 210, 214, 217, 218, 222, 224, 233, 234, 236, 238, 238, 238, 237, 235, 231, 229, 225, 222, 219, 217, 215, 212, 210, 208, 208, 210, 211, 212, 213, 216, 219, 221, 221, 221, 219, 216, 214, 216, 219, 219, 217, 215, 210, 202, 198, 194, 191, 191, 188, 186, 186, 186, 183, 181, 178, 174, 172, 169, 167, 163, 154, 151, 150, 148 }), EUROPE_COLOR);
    }
    
    private void defineAfrica() {
        // North Africa - moved down to connect with Congo
        addTerritory("North Africa", createPolygon(new int[]{ 333, 336, 338, 341, 343, 347, 351, 354, 357, 359, 361, 363, 370, 379, 383, 385, 388, 390, 391, 398, 399, 401, 402, 402, 400, 398, 396, 394, 392, 390, 390, 391, 392, 393, 396, 398, 401, 402, 409, 411, 414, 416, 419, 422, 425, 426, 428, 428, 426, 426, 426, 425, 422, 420, 417, 417, 413, 412, 411, 410, 409, 407, 406, 401, 398, 395, 395, 388, 389, 389, 388, 381, 378, 376, 375, 363, 361, 360, 357, 356, 353, 351, 349, 348, 344, 342, 334, 332, 328, 326, 322, 321, 321, 319, 316, 313, 312, 311, 310, 312, 313, 314, 314, 312, 311, 314, 317, 318, 319, 320, 323, 326, 326, 328, 328, 329, 330, 331 },
            new int[]{ 282, 282, 283, 283, 281, 279, 277, 273, 273, 275, 275, 273, 272, 271, 274, 276, 277, 276, 274, 274, 275, 275, 275, 286, 287, 288, 290, 293, 296, 299, 304, 308, 313, 317, 319, 322, 325, 326, 326, 328, 329, 331, 333, 335, 338, 339, 340, 354, 355, 365, 366, 368, 370, 372, 373, 375, 377, 378, 379, 392, 395, 395, 396, 396, 398, 398, 399, 399, 396, 391, 390, 389, 387, 385, 383, 383, 383, 384, 385, 386, 386, 385, 384, 383, 383, 385, 385, 382, 378, 376, 374, 371, 368, 364, 361, 359, 355, 352, 343, 339, 336, 334, 329, 325, 320, 317, 315, 311, 308, 304, 301, 300, 295, 292, 289, 288, 284, 283 }), AFRICA_COLOR);

// Egypt - moved down to connect with East Africa
addTerritory("Egypt", createPolygon(new int[]{ 400, 405, 407, 411, 414, 417, 420, 420, 421, 423, 427, 429, 432, 435, 437, 441, 444, 446, 450, 452, 455, 457, 459, 458, 456, 456, 458, 460, 462, 462, 465, 465, 460, 460, 451, 451, 446, 445, 436, 433, 430, 427, 427, 427, 424, 421, 418, 413, 410, 402, 398, 395, 393, 391, 390, 389, 392, 395, 398 },
new int[]{ 288, 289, 292, 295, 297, 300, 299, 296, 293, 290, 290, 292, 293, 296, 297, 297, 298, 298, 296, 296, 299, 302, 306, 307, 309, 312, 315, 318, 321, 322, 326, 327, 327, 328, 328, 329, 329, 328, 328, 331, 333, 335, 337, 339, 337, 333, 331, 329, 327, 326, 322, 318, 315, 310, 306, 301, 296, 292, 289 }), AFRICA_COLOR);

// East Africa - adjusted to maintain connections
addTerritory("East Africa", createPolygon(new int[]{ 426, 427, 429, 432, 434, 437, 445, 445, 452, 452, 462, 463, 465, 466, 468, 470, 471, 471, 476, 476, 481, 483, 486, 487, 488, 488, 490, 494, 497, 500, 503, 506, 510, 511, 512, 511, 509, 508, 505, 504, 500, 496, 492, 489, 485, 482, 478, 478, 475, 475, 475, 476, 476, 475, 473, 472, 469, 467, 465, 463, 462, 461, 458, 456, 456, 457, 456, 456, 451, 451, 449, 447, 447, 446, 448, 450, 452, 454, 456, 457, 459, 461, 462, 462, 460, 445, 442, 439, 437, 435, 432, 431, 428, 427, 426, 428, 428, 427 },
new int[]{ 338, 336, 334, 332, 330, 329, 328, 329, 329, 328, 328, 327, 326, 328, 330, 332, 333, 341, 346, 352, 355, 357, 359, 360, 361, 368, 369, 369, 368, 367, 367, 366, 366, 366, 371, 375, 380, 383, 387, 391, 396, 401, 405, 407, 412, 414, 418, 420, 422, 425, 429, 432, 435, 437, 439, 440, 440, 439, 440, 442, 452, 456, 455, 453, 450, 447, 445, 439, 435, 431, 429, 429, 427, 418, 414, 412, 408, 406, 403, 400, 398, 397, 395, 392, 391, 390, 388, 387, 381, 377, 374, 370, 368, 366, 357, 354, 342, 339 }), AFRICA_COLOR);


// Congo - kept in position
addTerritory("Congo", createPolygon(new int[]{ 410, 410, 412, 413, 415, 416, 419, 421, 423, 426, 427, 429, 430, 431, 432, 434, 436, 437, 437, 438, 441, 443, 444, 444, 459, 460, 462, 462, 459, 458, 456, 455, 452, 451, 449, 446, 446, 448, 448, 446, 444, 444, 446, 446, 445, 443, 439, 433, 429, 428, 425, 424, 420, 415, 413, 411, 411, 409, 408, 404, 402, 397, 395, 392, 392, 390, 388, 387, 386, 388, 395, 398, 400, 407, 409, 409 },
new int[]{ 392, 380, 379, 377, 376, 374, 372, 371, 369, 367, 367, 369, 370, 373, 375, 377, 379, 380, 386, 386, 387, 388, 389, 390, 390, 390, 393, 395, 397, 400, 402, 405, 407, 410, 413, 416, 426, 428, 429, 429, 431, 437, 438, 442, 444, 444, 440, 440, 440, 438, 437, 430, 426, 426, 427, 427, 425, 423, 421, 421, 418, 418, 419, 416, 414, 411, 410, 405, 402, 399, 399, 397, 396, 396, 395, 393 }), AFRICA_COLOR);

addTerritory("South Africa", createPolygon (new int[]{ 395, 396, 396, 401, 402, 402, 405, 408, 409, 410, 410, 412, 413, 415, 419, 423, 424, 424, 427, 429, 429, 439, 443, 445, 446, 446, 444, 443, 443, 444, 447, 447, 448, 450, 450, 450, 453, 455, 456, 457, 455, 456, 458, 460, 462, 462, 462, 464, 467, 470, 471, 473, 474, 477, 478, 478, 479, 479, 478, 473, 468, 460, 459, 460, 460, 460, 459, 458, 457, 455, 454, 453, 448, 448, 447, 445, 441, 439, 436, 434, 431, 426, 422, 419, 416, 413, 409, 409, 411, 401, 401, 399, 395, 394, 393, 397, 397, 400, 400, 397, 398, 401, 397, 395 },
new int[]{ 419, 419, 418, 418, 419, 420, 421, 421, 422, 424, 426, 427, 427, 425, 425, 429, 430, 437, 437, 439, 440, 440, 444, 444, 441, 439, 437, 436, 431, 430, 430, 429, 429, 430, 431, 434, 435, 440, 445, 448, 451, 454, 455, 456, 455, 452, 443, 441, 440, 440, 440, 438, 436, 436, 439, 441, 442, 458, 460, 465, 466, 472, 475, 476, 484, 488, 489, 491, 492, 493, 497, 501, 505, 508, 509, 510, 513, 516, 518, 520, 521, 522, 522, 523, 523, 522, 518, 515, 511, 493, 475, 471, 467, 465, 456, 453, 448, 444, 441, 438, 435, 432, 429, 420 }), AFRICA_COLOR);

addTerritory("Madagascar", createPolygon (new int[]{ 517, 518, 521, 522, 522, 522, 524, 524, 525, 525, 526, 527, 527, 526, 525, 524, 520, 520, 516, 515, 513, 511, 508, 507, 505, 504, 504, 503, 502, 500, 499, 497, 495, 491, 489, 487, 486, 485, 484, 485, 486, 485, 483, 483, 486, 487, 489, 490, 491, 491, 490, 490, 491, 492, 491, 493, 495, 498, 500, 502, 504, 506, 507, 508, 509, 510, 513, 515, 516, 516 },
new int[]{ 441, 441, 441, 442, 443, 445, 445, 446, 447, 449, 450, 451, 456, 459, 462, 464, 467, 476, 483, 486, 490, 494, 497, 500, 501, 502, 505, 506, 508, 510, 510, 508, 508, 511, 511, 509, 507, 504, 501, 499, 497, 496, 494, 490, 487, 485, 482, 482, 481, 479, 477, 472, 470, 467, 465, 461, 460, 459, 459, 460, 459, 458, 456, 454, 453, 448, 447, 447, 444, 442 }), AFRICA_COLOR);
    }
    
    private void defineAsia() {
   // Ural - Pentagon shape on western edge of Asia
   addTerritory("Ural", createPolygon(new int[]{ 528, 529, 530, 527, 526, 524, 521, 520, 522, 523, 523, 523, 524, 525, 525, 526, 528, 529, 531, 532, 534, 535, 537, 538, 538, 537, 536, 537, 539, 540, 541, 542, 542, 541, 539, 538, 536, 536, 537, 538, 541, 542, 544, 543, 544, 547, 550, 551, 551, 552, 554, 554, 555, 557, 558, 558, 557, 561, 561, 563, 566, 567, 569, 572, 572, 572, 570, 571, 573, 574, 574, 575, 575, 575, 574, 573, 573, 572, 570, 569, 569, 570, 571, 573, 575, 576, 577, 577, 577, 577, 579, 581, 582, 583, 584, 586, 587, 588, 588, 586, 585, 585, 582, 581, 580, 578, 578, 577, 575, 573, 571, 569, 569, 567, 566, 564, 563, 559, 555, 553, 551, 550, 547, 545, 543, 542, 540, 538, 536, 535, 534, 531, 529, 529, 528, 526, 526, 529, 531, 529, 527, 524, 521, 523, 524, 526, 525, 523, 523, 524, 524, 525, 523, 522, 522, 524, 526, 528, 528, 528 },
    new int[]{ 67, 65, 64, 62, 60, 58, 56, 54, 52, 51, 49, 45, 44, 43, 37, 37, 37, 39, 41, 42, 42, 43, 43, 46, 48, 50, 55, 56, 57, 59, 61, 63, 67, 69, 72, 74, 76, 77, 78, 78, 77, 75, 73, 70, 68, 65, 65, 66, 70, 73, 74, 77, 79, 80, 80, 82, 84, 84, 94, 96, 99, 103, 104, 106, 108, 112, 114, 116, 117, 119, 121, 122, 124, 127, 128, 130, 133, 135, 135, 137, 138, 139, 140, 140, 140, 142, 142, 145, 146, 148, 148, 148, 149, 152, 154, 155, 158, 158, 166, 167, 169, 172, 172, 175, 176, 180, 182, 184, 183, 181, 178, 177, 176, 175, 177, 177, 175, 174, 174, 173, 171, 168, 168, 167, 164, 162, 159, 156, 155, 153, 150, 149, 149, 146, 143, 141, 137, 136, 133, 131, 130, 129, 126, 122, 121, 119, 117, 113, 110, 107, 104, 100, 97, 92, 87, 85, 82, 78, 74, 69 }), ASIA_COLOR);

// Siberia - Larger northern territory
addTerritory("Siberia", createPolygon(new int[]{ 611, 609, 607, 605, 603, 603, 603, 601, 600, 598, 596, 594, 592, 590, 589, 589, 589, 588, 587, 584, 583, 581, 578, 578, 577, 575, 574, 573, 571, 569, 570, 573, 573, 575, 575, 571, 571, 572, 573, 570, 567, 565, 563, 561, 562, 558, 558, 556, 555, 555, 555, 554, 553, 551, 546, 545, 544, 543, 542, 541, 541, 542, 543, 545, 546, 548, 550, 551, 553, 553, 551, 549, 548, 548, 549, 550, 551, 553, 555, 556, 558, 557, 556, 554, 552, 553, 555, 559, 561, 561, 563, 565, 568, 570, 572, 575, 577, 579, 581, 584, 588, 590, 592, 593, 596, 599, 601, 601, 602, 604, 607, 611, 612, 612, 609, 605, 602, 601, 601, 604, 606, 609, 612, 614, 615, 617, 619, 621, 626, 628, 629, 630, 631, 631, 630, 632, 634, 636, 637, 635, 633, 634, 633, 633, 631, 629, 627, 625, 623, 621, 618, 616, 616, 616, 618, 621, 624, 624, 625, 625, 623, 623, 625, 626, 626, 628, 629, 628, 627, 629, 630, 630, 628, 627, 626, 626, 627, 628, 628, 627, 626, 624, 622, 621, 618, 616, 614, 611, 609, 609, 608, 607, 605, 603, 603, 604, 605, 605, 606, 605, 604, 603, 602, 604, 607, 609, 610, 610, 610, 609, 608, 611, 611, 612, 612, 611, 611 },
new int[]{ 182, 182, 182, 181, 180, 177, 175, 173, 169, 170, 171, 171, 170, 168, 166, 163, 160, 158, 156, 153, 150, 148, 147, 144, 142, 141, 139, 140, 140, 137, 136, 135, 130, 127, 121, 116, 114, 112, 107, 104, 101, 97, 95, 93, 85, 84, 82, 80, 77, 74, 70, 67, 64, 62, 62, 60, 58, 55, 53, 49, 46, 45, 45, 47, 50, 50, 51, 53, 53, 49, 46, 43, 43, 37, 35, 34, 36, 38, 40, 41, 41, 40, 37, 37, 33, 31, 29, 30, 31, 26, 25, 24, 21, 19, 17, 18, 18, 18, 15, 14, 14, 15, 15, 14, 12, 11, 12, 14, 16, 17, 17, 18, 22, 27, 28, 30, 33, 35, 37, 36, 34, 32, 30, 30, 31, 31, 31, 29, 29, 29, 31, 32, 33, 35, 38, 39, 39, 40, 43, 45, 47, 50, 54, 60, 61, 62, 62, 61, 60, 63, 66, 66, 68, 70, 69, 70, 71, 73, 74, 76, 76, 80, 81, 83, 90, 90, 92, 94, 95, 97, 99, 102, 104, 109, 112, 114, 115, 116, 120, 126, 128, 129, 129, 125, 122, 122, 124, 126, 129, 131, 132, 133, 133, 134, 137, 138, 140, 141, 143, 145, 146, 149, 152, 154, 156, 158, 158, 161, 163, 165, 167, 169, 172, 174, 175, 179, 180 }), ASIA_COLOR);

// Yakutsk - Northeastern territory
addTerritory("Yakutsk", createPolygon(new int[]{ 660, 648, 646, 645, 643, 642, 640, 640, 640, 639, 638, 637, 634, 634, 632, 630, 630, 629, 628, 628, 629, 627, 626, 626, 626, 624, 623, 625, 623, 618, 615, 617, 619, 621, 623, 624, 626, 628, 630, 633, 633, 633, 633, 635, 636, 636, 636, 634, 631, 631, 632, 633, 635, 636, 638, 639, 642, 645, 646, 646, 648, 650, 653, 654, 655, 656, 665, 665, 678, 678, 679, 680, 682, 684, 686, 687, 688, 689, 694, 696, 695, 695, 693, 693, 689, 686, 684, 684, 686, 687, 689, 691, 690, 690, 689, 688, 685, 683, 682, 680, 679, 678, 675, 671, 671, 668, 666, 666, 665, 664, 662, 660 },
new int[]{ 90, 90, 91, 92, 92, 90, 90, 92, 95, 97, 98, 99, 99, 101, 101, 101, 99, 96, 96, 93, 91, 90, 87, 84, 83, 80, 76, 74, 71, 70, 68, 66, 65, 63, 62, 60, 61, 61, 62, 61, 56, 48, 46, 46, 44, 43, 41, 40, 38, 35, 33, 31, 29, 27, 26, 25, 25, 26, 29, 33, 35, 36, 38, 38, 36, 35, 35, 28, 28, 30, 32, 32, 30, 29, 30, 32, 34, 36, 36, 38, 39, 41, 43, 46, 49, 50, 52, 60, 62, 63, 64, 66, 69, 73, 75, 76, 76, 75, 75, 76, 74, 71, 71, 72, 73, 75, 77, 80, 83, 85, 87, 88 }), ASIA_COLOR);

// Kamchatka - Peninsula on far northeast
addTerritory("Kamchatka", createPolygon(new int[]{ 688, 688, 689, 690, 689, 685, 682, 678, 676, 674, 671, 671, 661, 660, 661, 663, 665, 666, 668, 670, 672, 673, 677, 678, 678, 679, 681, 682, 684, 685, 688, 690, 690, 691, 685, 685, 687, 690, 692, 694, 695, 697, 699, 702, 706, 707, 709, 722, 724, 727, 727, 731, 735, 739, 743, 746, 752, 756, 759, 759, 765, 769, 772, 774, 774, 775, 775, 774, 772, 769, 766, 763, 762, 760, 757, 756, 755, 753, 753, 757, 757, 759, 758, 754, 752, 751, 748, 747, 746, 743, 742, 739, 738, 738, 735, 735, 737, 739, 738, 739, 739, 738, 739, 739, 740, 739, 736, 735, 731, 729, 726, 723, 723, 722, 723, 725, 726, 729, 730, 731, 731, 729, 728, 727, 727, 725, 724, 723, 721, 719, 718, 716, 716, 717, 718, 719, 719, 715, 712, 710, 709, 708, 707, 702, 699, 697, 695, 692, 690, 690, 689, 686, 686, 686, 688, 690, 690, 692, 694, 698, 701, 703, 704, 706, 706, 707, 708, 708, 708, 708, 707, 707, 705, 703, 701, 699, 696, 694, 693, 690, 687, 686, 689, 689, 688 },
new int[]{ 154, 147, 144, 142, 136, 130, 128, 127, 129, 130, 130, 124, 113, 90, 88, 86, 84, 78, 75, 74, 72, 70, 70, 72, 74, 76, 76, 74, 75, 76, 76, 74, 71, 66, 61, 52, 49, 49, 46, 43, 40, 38, 36, 36, 37, 39, 41, 41, 42, 42, 38, 37, 37, 38, 41, 43, 45, 47, 51, 53, 53, 56, 58, 59, 61, 64, 66, 68, 69, 71, 71, 70, 67, 66, 65, 62, 63, 65, 68, 69, 72, 74, 76, 79, 82, 85, 87, 90, 92, 93, 90, 90, 92, 93, 95, 98, 101, 104, 107, 111, 115, 119, 121, 125, 128, 131, 133, 134, 132, 128, 123, 120, 113, 108, 104, 98, 95, 92, 89, 86, 83, 81, 83, 87, 89, 91, 92, 92, 90, 86, 84, 87, 89, 92, 94, 96, 98, 99, 99, 98, 95, 96, 99, 99, 97, 99, 99, 100, 103, 105, 106, 108, 112, 114, 114, 114, 117, 118, 116, 117, 121, 123, 132, 135, 140, 143, 148, 153, 157, 160, 163, 168, 172, 176, 176, 176, 174, 172, 169, 168, 165, 163, 161, 158, 156 }), ASIA_COLOR);

// Irkutsk - Central northern territory
addTerritory("Irkutsk", createPolygon(new int[]{ 669, 667, 667, 664, 663, 662, 659, 659, 658, 657, 656, 655, 652, 650, 648, 646, 643, 638, 633, 630, 629, 626, 624, 622, 619, 617, 615, 612, 610, 608, 605, 603, 602, 603, 604, 606, 606, 605, 603, 603, 606, 609, 609, 610, 613, 614, 616, 619, 620, 621, 622, 624, 626, 628, 628, 629, 626, 626, 628, 628, 629, 630, 634, 636, 638, 639, 640, 640, 641, 643, 645, 646, 659, 660, 660, 662, 664, 667, 669, 671, 671, 674, 675, 677, 680, 682, 684, 686, 688, 689, 690, 689, 688, 688, 688, 688, 686, 684, 683, 680, 678, 676, 674, 673, 671, 670 },
new int[]{ 138, 138, 139, 139, 139, 140, 141, 150, 153, 155, 157, 158, 158, 157, 157, 159, 160, 160, 160, 160, 159, 158, 160, 160, 160, 158, 157, 157, 157, 156, 154, 152, 152, 149, 146, 144, 143, 140, 135, 133, 133, 132, 129, 127, 126, 123, 122, 122, 124, 126, 127, 128, 128, 125, 120, 116, 114, 110, 109, 105, 103, 102, 101, 99, 99, 97, 93, 91, 90, 92, 92, 90, 90, 90, 113, 115, 118, 121, 122, 124, 130, 130, 129, 128, 128, 128, 129, 132, 135, 136, 142, 144, 146, 149, 153, 156, 156, 157, 155, 152, 149, 146, 144, 141, 140, 138 }), ASIA_COLOR);

// Mongolia - Central territory
addTerritory("Mongolia", createPolygon(new int[]{ 683, 681, 679, 677, 677, 679, 681, 683, 684, 686, 688, 687, 684, 681, 677, 673, 670, 665, 661, 658, 655, 653, 648, 647, 637, 632, 629, 626, 623, 620, 616, 614, 613, 611, 611, 612, 610, 609, 609, 611, 610, 613, 616, 617, 620, 623, 625, 628, 631, 637, 641, 643, 645, 648, 651, 654, 656, 657, 659, 660, 659, 662, 664, 667, 668, 672, 674, 677, 680, 683, 687, 689, 688, 685, 686, 692, 693, 696, 700, 700, 699, 698, 696, 695, 696, 697, 701, 705, 707, 707, 704, 703, 699, 697, 697, 697, 696, 693, 691, 691, 690, 689, 687, 686, 684, 682, 682 },
new int[]{ 196, 197, 199, 202, 204, 206, 208, 207, 207, 208, 211, 214, 216, 216, 215, 213, 213, 213, 213, 210, 211, 213, 212, 209, 210, 209, 207, 204, 204, 200, 196, 194, 186, 183, 178, 174, 171, 167, 162, 161, 158, 158, 157, 159, 160, 160, 159, 159, 160, 160, 161, 161, 160, 158, 158, 158, 157, 154, 151, 146, 141, 141, 139, 139, 138, 140, 144, 148, 152, 156, 156, 158, 161, 163, 167, 167, 172, 175, 176, 177, 180, 183, 186, 187, 192, 196, 198, 202, 204, 209, 213, 216, 216, 213, 209, 207, 206, 207, 206, 202, 200, 200, 201, 203, 203, 202, 198 }), ASIA_COLOR);

// Japan - Island off east coast
addTerritory("Japan", createPolygon(new int[]{ 731, 731, 729, 728, 728, 729, 731, 730, 728, 726, 727, 729, 732, 734, 736, 738, 742, 746, 748, 750, 753, 755, 754, 752, 749, 748, 747, 744, 741, 739, 740, 742, 744, 747, 748, 748, 748, 749, 750, 751, 751, 749, 746, 745, 741, 739, 738, 736, 736, 734, 733, 730, 729, 727, 723, 721, 720, 720, 716, 715, 714, 711, 709, 706, 706, 709, 709, 711, 714, 714, 718, 721, 721, 725, 728, 729, 729, 729, 730, 730, 728, 727, 729, 730 },
new int[]{ 165, 163, 161, 158, 155, 152, 149, 144, 143, 141, 139, 137, 137, 137, 139, 140, 140, 140, 138, 140, 143, 144, 146, 148, 150, 153, 156, 157, 158, 159, 160, 161, 164, 167, 170, 175, 179, 182, 185, 190, 195, 197, 200, 202, 202, 203, 205, 206, 210, 212, 213, 212, 214, 216, 219, 220, 224, 227, 231, 232, 231, 227, 225, 223, 219, 217, 212, 208, 206, 201, 200, 198, 193, 191, 188, 186, 183, 178, 177, 174, 173, 171, 168, 166 }), ASIA_COLOR);

// Afghanistan - Northwest territory (adjusted western boundary)
addTerritory("Afghanistan", createPolygon(new int[]{ 569, 569, 567, 564, 561, 559, 556, 553, 551, 550, 548, 546, 542, 541, 539, 538, 535, 533, 530, 529, 526, 523, 520, 517, 514, 513, 511, 510, 511, 511, 509, 507, 507, 507, 505, 503, 502, 502, 501, 502, 504, 506, 505, 503, 500, 498, 496, 495, 493, 490, 488, 487, 487, 489, 490, 492, 495, 498, 501, 504, 506, 508, 514, 516, 519, 521, 523, 526, 528, 530, 533, 534, 536, 538, 540, 542, 543, 544, 544, 546, 548, 549, 550, 550, 552, 555, 560, 563, 563, 565, 567, 568, 569, 571, 574, 576, 575, 574, 575, 576, 576, 575, 573, 571, 569, 567, 565, 563, 564, 564, 567, 569 },
new int[]{ 225, 228, 230, 233, 234, 233, 231, 230, 231, 233, 234, 235, 236, 239, 241, 243, 243, 243, 241, 238, 236, 235, 235, 235, 235, 229, 227, 225, 222, 220, 219, 217, 214, 211, 209, 209, 208, 204, 200, 197, 197, 193, 190, 188, 190, 193, 194, 193, 190, 185, 182, 180, 171, 168, 164, 162, 162, 159, 158, 159, 158, 155, 154, 156, 155, 154, 152, 152, 150, 149, 150, 153, 155, 157, 159, 162, 164, 165, 167, 168, 167, 167, 167, 171, 173, 174, 174, 174, 176, 177, 176, 175, 177, 180, 181, 184, 187, 190, 191, 193, 196, 199, 202, 205, 208, 210, 211, 215, 218, 221, 223, 225 }), ASIA_COLOR);

// China - Large central territory
addTerritory("China", createPolygon(new int[]{ 576, 578, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 591, 593, 596, 598, 600, 602, 603, 603, 605, 607, 610, 611, 613, 613, 616, 618, 620, 622, 625, 629, 630, 635, 639, 642, 645, 648, 649, 653, 655, 656, 660, 661, 664, 667, 670, 674, 678, 680, 684, 684, 687, 690, 692, 694, 692, 694, 694, 692, 693, 696, 696, 692, 692, 694, 693, 692, 690, 687, 684, 682, 681, 680, 676, 676, 674, 672, 672, 671, 668, 667, 667, 664, 663, 661, 659, 657, 655, 653, 650, 647, 646, 643, 640, 637, 635, 633, 630, 628, 627, 626, 625, 623, 621, 618, 615, 612, 610, 607, 606, 602, 599, 598, 593, 591, 589, 587, 584, 582, 579, 579, 580, 582, 582, 579, 577, 575, 574, 574, 571, 569, 567, 565, 564, 564, 567, 569, 570, 574, 575, 576, 577, 575, 575, 576 },
new int[]{ 184, 182, 180, 177, 176, 174, 172, 172, 168, 166, 166, 168, 170, 171, 171, 169, 170, 174, 177, 180, 181, 182, 182, 183, 186, 194, 195, 198, 201, 204, 205, 206, 209, 209, 210, 209, 210, 210, 212, 212, 212, 211, 211, 213, 214, 213, 213, 214, 215, 215, 216, 218, 222, 223, 228, 231, 233, 235, 239, 240, 242, 246, 248, 251, 253, 257, 260, 266, 268, 271, 273, 276, 279, 281, 281, 284, 286, 288, 289, 289, 289, 287, 285, 284, 282, 279, 278, 276, 275, 276, 279, 282, 283, 283, 279, 277, 273, 270, 269, 270, 271, 272, 269, 265, 264, 262, 263, 263, 264, 263, 260, 259, 258, 257, 257, 256, 255, 253, 252, 251, 250, 248, 246, 242, 231, 230, 231, 230, 227, 225, 225, 225, 223, 220, 218, 213, 211, 209, 206, 204, 201, 199, 194, 192, 189, 186 }), ASIA_COLOR);

// Middle East - Western territory (adjusted northern boundary)
addTerritory("Middle East", createPolygon(new int[]{ 424, 425, 425, 424, 423, 422, 423, 423, 424, 425, 430, 432, 434, 436, 439, 442, 445, 449, 453, 461, 463, 464, 469, 474, 478, 483, 488, 492, 496, 497, 499, 501, 506, 511, 513, 514, 514, 515, 518, 522, 525, 527, 529, 532, 534, 535, 535, 535, 535, 538, 540, 541, 540, 542, 544, 544, 543, 541, 539, 536, 534, 532, 529, 527, 524, 520, 517, 514, 513, 511, 509, 508, 506, 505, 505, 507, 509, 511, 512, 515, 515, 521, 523, 528, 530, 530, 533, 536, 538, 538, 537, 535, 533, 530, 527, 525, 522, 518, 513, 509, 507, 506, 491, 488, 486, 485, 483, 480, 477, 474, 472, 470, 468, 464, 460, 459, 458, 456, 454, 451, 454, 457, 458, 459, 458, 457, 454, 453, 449, 446, 444, 438, 434, 429, 425 },
new int[]{ 263, 260, 256, 254, 252, 250, 248, 245, 242, 239, 233, 235, 237, 239, 239, 238, 237, 235, 233, 234, 236, 238, 239, 238, 238, 240, 238, 236, 235, 233, 236, 239, 240, 241, 241, 240, 237, 236, 235, 235, 236, 238, 239, 243, 243, 246, 252, 258, 261, 265, 268, 270, 278, 280, 283, 285, 288, 291, 293, 295, 297, 297, 297, 294, 294, 294, 294, 290, 283, 277, 279, 280, 281, 286, 290, 291, 293, 295, 297, 298, 301, 302, 300, 299, 301, 303, 305, 308, 310, 319, 322, 326, 331, 333, 337, 341, 343, 345, 348, 350, 352, 353, 353, 349, 344, 341, 337, 332, 330, 326, 323, 319, 313, 310, 308, 307, 304, 301, 298, 295, 292, 289, 286, 268, 266, 264, 266, 269, 269, 269, 267, 266, 267, 264, 263 }), ASIA_COLOR);

// India - Southern peninsula
addTerritory("India", createPolygon(new int[]{ 535, 537, 539, 541, 543, 546, 549, 550, 551, 553, 555, 557, 560, 561, 564, 566, 569, 569, 572, 574, 574, 574, 582, 582, 581, 579, 580, 583, 586, 590, 592, 596, 600, 602, 606, 607, 608, 613, 615, 617, 621, 623, 624, 625, 625, 624, 622, 620, 617, 615, 614, 613, 612, 611, 613, 612, 607, 604, 604, 604, 601, 599, 599, 598, 597, 597, 595, 595, 595, 594, 593, 592, 590, 589, 585, 583, 583, 580, 577, 577, 575, 575, 570, 570, 566, 567, 569, 569, 568, 566, 565, 564, 562, 560, 557, 559, 558, 555, 552, 549, 545, 544, 542, 541, 541, 539, 537, 535, 535 },
new int[]{ 245, 244, 242, 238, 237, 236, 234, 232, 230, 230, 231, 232, 233, 234, 233, 230, 228, 225, 226, 226, 229, 230, 231, 243, 245, 249, 250, 251, 254, 256, 257, 257, 259, 260, 260, 262, 264, 264, 263, 263, 263, 265, 268, 270, 272, 275, 279, 282, 285, 289, 290, 290, 291, 294, 298, 299, 301, 302, 305, 310, 314, 316, 322, 326, 328, 332, 334, 339, 344, 347, 350, 355, 357, 360, 361, 359, 356, 352, 349, 343, 340, 334, 331, 325, 321, 306, 302, 300, 299, 301, 303, 304, 305, 303, 300, 297, 295, 295, 291, 286, 286, 283, 281, 278, 270, 266, 263, 259, 245 }), ASIA_COLOR);

// Siam - Southeast territory
addTerritory("Siam", createPolygon(new int[]{ 614, 615, 617, 619, 621, 623, 625, 627, 630, 633, 635, 637, 639, 642, 643, 647, 649, 651, 654, 656, 657, 660, 663, 664, 662, 661, 660, 662, 666, 669, 671, 672, 675, 676, 674, 674, 672, 670, 667, 667, 665, 663, 661, 661, 660, 657, 655, 652, 651, 650, 649, 649, 649, 651, 654, 653, 655, 657, 659, 658, 655, 651, 649, 647, 644, 641, 640, 640, 641, 641, 637, 634, 631, 626, 622, 619, 616, 615 },
new int[]{ 291, 289, 286, 282, 281, 277, 273, 270, 269, 270, 273, 276, 279, 281, 283, 283, 281, 277, 276, 275, 277, 279, 282, 284, 287, 289, 295, 297, 300, 305, 309, 312, 314, 325, 326, 333, 334, 336, 339, 341, 341, 342, 339, 336, 332, 330, 328, 327, 324, 323, 324, 327, 329, 332, 333, 340, 343, 347, 349, 350, 351, 351, 349, 345, 341, 338, 335, 331, 328, 322, 315, 314, 314, 312, 305, 300, 294, 292 }), ASIA_COLOR);
    }
    
    private void defineAustralia() {
        // Indonesia - reshaped to better represent the archipelago
        addTerritory("Indonesia", createPolygon(new int[]{ 646, 649, 652, 654, 657, 659, 662, 664, 666, 672, 675, 677, 679, 677, 675, 676, 676, 676, 676, 677, 678, 680, 683, 686, 688, 691, 692, 694, 695, 696, 697, 696, 693, 691, 691, 689, 687, 687, 688, 689, 690, 691, 691, 689, 686, 684, 682, 680, 679, 679, 679, 678, 679, 680, 682, 683, 682, 681, 678, 674, 671, 666, 662, 659, 656, 652, 652, 653, 652, 650, 649, 647, 645, 643, 639, 636, 632, 629, 627, 624, 624, 623, 621, 620, 617, 616, 613, 612, 610, 611, 612, 615, 617, 622, 625, 627, 629, 633, 634, 635, 637, 639, 642, 644, 646 },
        new int[]{ 381, 380, 378, 376, 373, 369, 365, 363, 359, 358, 362, 364, 367, 370, 373, 380, 384, 386, 387, 388, 387, 384, 384, 385, 385, 381, 379, 379, 381, 383, 385, 388, 390, 391, 395, 397, 399, 402, 406, 408, 409, 412, 414, 416, 416, 414, 412, 411, 412, 414, 416, 418, 420, 422, 423, 426, 428, 430, 430, 431, 431, 431, 431, 430, 430, 429, 426, 424, 422, 423, 424, 425, 425, 422, 419, 414, 410, 406, 403, 402, 397, 394, 392, 391, 388, 385, 382, 377, 375, 371, 370, 369, 371, 372, 375, 377, 379, 380, 382, 385, 386, 387, 387, 386, 384 }), AUSTRALIA_COLOR);


        // New Guinea - more accurate shape representing the actual island
        addTerritory("New Guinea", createPolygon(new int[]{ 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 711, 711, 711, 711, 712, 713, 714, 715, 715, 715, 716, 718, 719, 725, 727, 729, 731, 732, 734, 736, 738, 740, 742, 744, 745, 747, 747, 748, 748, 749, 751, 754, 755, 755, 753, 753, 754, 755, 755, 756, 758, 759, 759, 758, 756, 754, 752, 750, 748, 746, 746, 745, 744, 742, 740, 739, 737, 734, 732, 729, 727, 725, 723, 721, 719, 717, 715, 713, 713, 714, 714, 713, 712, 710, 708, 705, 703, 701, 699, 697, 696, 695, 693, 692, 694, 695, 697, 698 },
        new int[]{ 347, 347, 347, 347, 348, 350, 351, 351, 351, 351, 351, 353, 355, 357, 358, 360, 360, 360, 358, 355, 353, 351, 350, 350, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 362, 362, 365, 367, 370, 371, 372, 373, 375, 378, 380, 382, 383, 384, 386, 388, 389, 390, 396, 398, 400, 399, 398, 398, 398, 397, 395, 392, 391, 390, 390, 393, 394, 394, 394, 394, 393, 391, 390, 390, 390, 390, 389, 387, 385, 381, 378, 375, 373, 373, 372, 372, 371, 369, 367, 364, 362, 359, 357, 355, 353, 351, 349, 348 }), AUSTRALIA_COLOR);
        
// Western Australia - completely redesigned eastern boundary to prevent overlap
addTerritory("Western Australia", createPolygon(new int[]{ 708, 708, 710, 711, 711, 745, 745, 744, 744, 744, 744, 743, 743, 743, 743, 744, 744, 743, 741, 741, 737, 736, 735, 733, 733, 732, 730, 730, 728, 726, 726, 724, 722, 718, 714, 712, 709, 707, 704, 701, 698, 697, 695, 693, 691, 688, 684, 681, 679, 678, 676, 672, 669, 667, 664, 663, 664, 667, 667, 667, 661, 660, 660, 657, 655, 655, 654, 652, 650, 650, 652, 658, 661, 666, 673, 678, 678, 678, 680, 682, 683, 684, 685, 685, 686, 688, 690, 692, 695, 697, 700, 701, 703, 704, 704, 705, 706 },
new int[]{ 415, 431, 431, 432, 464, 463, 468, 470, 472, 476, 481, 483, 487, 491, 494, 495, 504, 506, 508, 511, 510, 508, 506, 506, 507, 509, 508, 506, 508, 506, 502, 499, 497, 497, 496, 496, 496, 497, 499, 501, 502, 504, 506, 508, 509, 510, 510, 511, 514, 516, 516, 517, 517, 516, 515, 513, 511, 508, 506, 502, 498, 495, 492, 490, 489, 478, 475, 467, 465, 462, 460, 458, 455, 453, 448, 444, 439, 435, 434, 434, 435, 437, 436, 433, 430, 428, 426, 422, 421, 422, 424, 425, 426, 424, 420, 417, 416 }), AUSTRALIA_COLOR);

// Eastern Australia - completely redesigned western boundary to prevent overlap
addTerritory("Eastern Australia", createPolygon(new int[]{ 708, 711, 715, 718, 720, 723, 728, 731, 733, 734, 734, 732, 731, 729, 728, 730, 732, 735, 738, 739, 740, 743, 744, 745, 746, 746, 748, 749, 751, 752, 752, 754, 756, 757, 758, 758, 758, 759, 760, 761, 764, 766, 767, 767, 770, 773, 776, 777, 778, 781, 783, 782, 785, 787, 787, 788, 789, 785, 783, 781, 780, 778, 776, 775, 775, 766, 765, 763, 760, 758, 758, 756, 755, 752, 750, 749, 742, 741, 744, 744, 744, 744, 744, 743, 743, 743, 744, 744, 745, 712, 711, 708, 708 },
new int[]{ 415, 414, 413, 411, 411, 411, 411, 412, 413, 415, 418, 420, 422, 424, 426, 427, 428, 429, 431, 432, 434, 436, 436, 434, 431, 419, 417, 406, 405, 405, 407, 408, 411, 414, 417, 420, 423, 426, 428, 430, 432, 434, 435, 441, 443, 444, 447, 448, 455, 458, 459, 463, 464, 466, 468, 469, 490, 494, 497, 502, 504, 510, 513, 515, 521, 521, 523, 526, 526, 524, 523, 523, 525, 525, 523, 520, 520, 510, 504, 502, 499, 497, 495, 492, 486, 482, 481, 474, 465, 464, 432, 430, 416 }), AUSTRALIA_COLOR);
}
    
    private Polygon createPolygon(int[] baseX, int[] baseY) {
        // Verwende direkt das original Polygon ohne Schrumpfen
        return new Polygon(baseX, baseY, baseX.length);
    }
    
    private void addTerritory(String name, Polygon shape, Color color) {
        territories.put(name, new Territory(name, shape, color));
    }
    
    private void defineAdjacentTerritories() {
        // Hilfsmethode, um Nachbarschaften in beide Richtungen zu definieren
        BiConsumer<String, String> addAdjacency = (t1, t2) -> {
            adjacentTerritories.computeIfAbsent(t1, k -> new HashSet<>()).add(t2);
            adjacentTerritories.computeIfAbsent(t2, k -> new HashSet<>()).add(t1);
        };
        
        // Nordamerika
        addAdjacency.accept("Alaska", "Nordwest-Territorium");
        addAdjacency.accept("Alaska", "Alberta");
        addAdjacency.accept("Nordwest-Territorium", "Alberta");
        addAdjacency.accept("Nordwest-Territorium", "Ontario");
        addAdjacency.accept("Nordwest-Territorium", "Grönland");
        addAdjacency.accept("Grönland", "Ontario");
        addAdjacency.accept("Grönland", "Quebec");
        addAdjacency.accept("Alberta", "Ontario");
        addAdjacency.accept("Alberta", "Western United States");
        addAdjacency.accept("Ontario", "Quebec");
        addAdjacency.accept("Ontario", "Western United States");
        addAdjacency.accept("Ontario", "Eastern United States");
        addAdjacency.accept("Quebec", "Eastern United States");
        addAdjacency.accept("Western United States", "Eastern United States");
        addAdjacency.accept("Western United States", "Central America");
        addAdjacency.accept("Eastern United States", "Central America");
        
        // Südamerika
        addAdjacency.accept("Central America", "Venezuela");
        addAdjacency.accept("Venezuela", "Peru");
        addAdjacency.accept("Venezuela", "Brasilien");
        addAdjacency.accept("Peru", "Brasilien");
        addAdjacency.accept("Peru", "Argentinien");
        addAdjacency.accept("Brasilien", "Argentinien");
        
        // Europa
        addAdjacency.accept("Island", "Grönland");
        addAdjacency.accept("Island", "Skandinavien");
        addAdjacency.accept("Island", "Great Britain");
        addAdjacency.accept("Skandinavien", "Great Britain");
        addAdjacency.accept("Skandinavien", "Northern Europe");
        addAdjacency.accept("Skandinavien", "Ukraine");
        addAdjacency.accept("Great Britain", "Western Europe");
        addAdjacency.accept("Great Britain", "Northern Europe");
        addAdjacency.accept("Western Europe", "Northern Europe");
        addAdjacency.accept("Western Europe", "Southern Europe");
        addAdjacency.accept("Northern Europe", "Southern Europe");
        addAdjacency.accept("Northern Europe", "Ukraine");
        addAdjacency.accept("Southern Europe", "Ukraine");
        addAdjacency.accept("Southern Europe", "North Africa");
        addAdjacency.accept("Southern Europe", "Egypt");
        addAdjacency.accept("Southern Europe", "Middle East");
        
        // Afrika
        addAdjacency.accept("North Africa", "Egypt");
        addAdjacency.accept("North Africa", "East Africa");
        addAdjacency.accept("North Africa", "Congo");
        addAdjacency.accept("Egypt", "Middle East");
        addAdjacency.accept("Egypt", "East Africa");
        addAdjacency.accept("East Africa", "Middle East");
        addAdjacency.accept("East Africa", "Congo");
        addAdjacency.accept("East Africa", "South Africa");
        addAdjacency.accept("East Africa", "Madagascar");
        addAdjacency.accept("Congo", "South Africa");
        addAdjacency.accept("South Africa", "Madagascar");
        
        // Asien
        addAdjacency.accept("Ukraine", "Ural");
        addAdjacency.accept("Ukraine", "Afghanistan");
        addAdjacency.accept("Ukraine", "Middle East");
        addAdjacency.accept("Ural", "Sibirien");
        addAdjacency.accept("Ural", "China");
        addAdjacency.accept("Ural", "Afghanistan");
        addAdjacency.accept("Sibirien", "Yakutsk");
        addAdjacency.accept("Sibirien", "Mongolia");
        addAdjacency.accept("Sibirien", "China");
        addAdjacency.accept("Yakutsk", "Kamtschatka");
        addAdjacency.accept("Yakutsk", "Mongolia");
        addAdjacency.accept("Kamtschatka", "Mongolia");
        addAdjacency.accept("Kamtschatka", "Japan");
        addAdjacency.accept("Afghanistan", "Middle East");
        addAdjacency.accept("Afghanistan", "India");
        addAdjacency.accept("Afghanistan", "China");
        addAdjacency.accept("Middle East", "India");
        addAdjacency.accept("China", "Mongolia");
        addAdjacency.accept("China", "India");
        addAdjacency.accept("China", "Siam");
        addAdjacency.accept("Mongolia", "Japan");
        addAdjacency.accept("India", "Siam");
        
        // Australien
        addAdjacency.accept("Siam", "Indonesia");
        addAdjacency.accept("Indonesia", "New Guinea");
        addAdjacency.accept("Indonesia", "Western Australia");
        addAdjacency.accept("New Guinea", "Western Australia");
        addAdjacency.accept("New Guinea", "Eastern Australia");
        addAdjacency.accept("Western Australia", "Eastern Australia");
        
        // Kontinentübergreifende Verbindungen
        addAdjacency.accept("Alaska", "Kamtschatka");
        addAdjacency.accept("Brasilien", "North Africa");
    }

    // After defining all territories, add strategic connection lines

// Define connection method
private void addConnection(String territory1, String territory2) {
    Territory t1 = territories.get(territory1);
    Territory t2 = territories.get(territory2);
    
    // Calculate center points for each territory
    Point center1 = t1.getCenter();
    Point center2 = t2.getCenter();
    
    // Add this connection to a list of connections to be drawn
    connections.add(new Connection(center1, center2));
}

// Call this method after all territories are created
private void setupConnections() {
    // Strategic intercontinental connections
    addConnection("Island", "Grönland");
    addConnection("Western Europe", "North Africa");
    addConnection("Southern Europe", "Egypt");
    addConnection("Southern Europe", "Middle East");
    addConnection("Ukraine", "Ural");
    addConnection("Ukraine", "Afghanistan");
    addConnection("Middle East", "India");
    addConnection("Indonesia", "Western Australia");
    addConnection("Indonesia", "New Guinea");
    addConnection("New Guinea", "Eastern Australia");
    
    // Add Alaska to Kamchatka connection (wrap around)
    addConnection("Alaska", "Kamchatka");
    
    // Add Central America to Brazil connection
    addConnection("Central America", "Brasilien");
    
    // Add Madagascar connections
    addConnection("Madagascar", "East Africa");
    addConnection("Madagascar", "South Africa");
}

// Add drawing method for connections
private void drawConnections(Graphics g) {
    g.setColor(Color.BLACK);
    for (Connection conn : connections) {
        // Draw line
        g.drawLine(conn.from.x, conn.from.y, conn.to.x, conn.to.y);
        
        // Draw dots at endpoints
        int dotSize = 6;
        g.fillOval(conn.from.x - dotSize/2, conn.from.y - dotSize/2, dotSize, dotSize);
        g.fillOval(conn.to.x - dotSize/2, conn.to.y - dotSize/2, dotSize, dotSize);
    }
}

// Connection class
private class Connection {
    Point from;
    Point to;
    
    public Connection(Point from, Point to) {
        this.from = from;
        this.to = to;
    }
}
    
    private void handleTerritoryClick(Point clickPoint) {
        previousSelectedTerritory = selectedTerritory;
        selectedTerritory = null;
        
        // Prüfe, ob ein Territorium angeklickt wurde
        for (Territory territory : territories.values()) {
            if (territory.contains(clickPoint)) {
                selectedTerritory = territory;
                System.out.println("Territorium ausgewählt: " + territory.getName());
                break;
            }
        }
        
        // Neuzeichnen, wenn sich die Auswahl geändert hat
        if (previousSelectedTerritory != selectedTerritory) {
            repaint();
        }
    }
    
    @Override
    public String getToolTipText(MouseEvent event) {
        Point p = event.getPoint();
        for (Territory territory : territories.values()) {
            if (territory.contains(p)) {
                StringBuilder tooltip = new StringBuilder(territory.getName());
                
                // Zeige Nachbarländer im Tooltip
                Set<String> neighbors = adjacentTerritories.get(territory.getName());
                if (neighbors != null && !neighbors.isEmpty()) {
                    tooltip.append("<br>Grenzt an: ");
                    boolean first = true;
                    for (String neighbor : neighbors) {
                        if (!first) {
                            tooltip.append(", ");
                        }
                        tooltip.append(neighbor);
                        first = false;
                    }
                }
                
                return "<html>" + tooltip.toString() + "</html>";
            }
        }
        return null;
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        
        // Anti-Aliasing für glattere Kanten
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // Hintergrundbild zeichnen
        if (backgroundImage != null) {
            g2d.drawImage(backgroundImage, 0, 0, this);
        }
        
        // Zeichne zuerst die Verbindungslinien, damit sie unter den Territorien liegen
        drawConnections(g2d);
        
        // Alle Territorien zeichnen
        for (Territory territory : territories.values()) {
            territory.draw(g2d, territory == selectedTerritory);
        }
        
        // Statusleiste mit Informationen zum ausgewählten Territorium
        if (selectedTerritory != null) {
            drawStatusBar(g2d);
        }
    }

    private void drawConnections(Graphics2D g2d) {
        g2d.setColor(Color.BLACK); // Black lines for better visibility
        g2d.setStroke(new BasicStroke(2.5f)); // Thicker lines
    
        List<String[]> specialConnections = Arrays.asList(
            new String[]{"Nordwest-Territorium", "Grönland"},
            new String[]{"Ontario", "Grönland"},
            new String[]{"Quebec", "Grönland"},
            new String[]{"Grönland", "Island"},
            new String[]{"Island", "Skandinavien"},
            new String[]{"Island", "Great Britain"},
            new String[]{"Great Britain", "Skandinavien"},
            new String[]{"Great Britain", "Northern Europe"},
            new String[]{"Skandinavien", "Northern Europe"},
            new String[]{"Great Britain", "Western Europe"},
            new String[]{"Southern Europe", "North Africa"},
            new String[]{"Southern Europe", "Egypt"},
            new String[]{"North Africa", "Brasilien"},
            new String[]{"East Africa", "Middle East"},
            new String[]{"East Africa", "Madagascar"},
            new String[]{"South Africa", "Madagascar"},
            new String[]{"Japan", "Kamchatka"},
            new String[]{"Japan", "Mongolia"},
            new String[]{"Siam", "Indonesia"},
            new String[]{"Indonesia", "New Guinea"},
            new String[]{"Indonesia", "Western Australia"},
            new String[]{"New Guinea", "Western Australia"},
            new String[]{"New Guinea", "Eastern Australia"}
        );
    
        for (String[] pair : specialConnections) {
            Territory t1 = territories.get(pair[0]);
            Territory t2 = territories.get(pair[1]);
    
            if (t1 != null && t2 != null) {
                Point p1 = t1.getCenter();
                Point p2 = t2.getCenter();
                g2d.drawLine(p1.x, p1.y, p2.x, p2.y);
            }
        }
    
        // Special case: Alaska ↔ Kamchatka
        Territory alaska = territories.get("Alaska");
        Territory kamchatka = territories.get("Kamchatka");
    
        if (alaska != null && kamchatka != null) {
            Point p1 = alaska.getCenter();
            Point p2 = kamchatka.getCenter();
            
            int mapWidth = getWidth(); // Map width
            
            // Draw a line going off the left side from Alaska
            g2d.drawLine(p1.x, p1.y, -20, p1.y);
            
            // Draw a line coming in from the right side to Kamchatka
            g2d.drawLine(mapWidth + 20, p2.y, p2.x, p2.y);
        }
    }
     

    private void drawStatusBar(Graphics2D g2d) {
        // Statusleiste unten zeichnen
        int barHeight = 50;
        int barY = getHeight() - barHeight;
        
        // Hintergrund für Statusleiste
        g2d.setColor(new Color(50, 50, 50, 180));
        g2d.fillRect(0, barY, getWidth(), barHeight);
        
        // Kanten der Statusleiste
        g2d.setColor(new Color(150, 150, 150));
        g2d.drawLine(0, barY, getWidth(), barY);
        
        
// Informationen über das ausgewählte Territorium anzeigen
g2d.setColor(Color.WHITE);
g2d.setFont(new Font("Arial", Font.BOLD, 14));
g2d.drawString("Selected: " + selectedTerritory.getName(), 10, barY + 20);

// Anzeige der Nachbarländer
Set<String> neighbors = adjacentTerritories.get(selectedTerritory.getName());
if (neighbors != null && !neighbors.isEmpty()) {
    g2d.setFont(new Font("Arial", Font.PLAIN, 12));
    StringBuilder neighborText = new StringBuilder("Nachbarn: ");
    boolean first = true;
    for (String neighbor : neighbors) {
        if (!first) {
            neighborText.append(", ");
        }
        neighborText.append(neighbor);
        first = false;
    }
    g2d.drawString(neighborText.toString(), 10, barY + 35);
}
}
}

class Territory {
private String name;
private Polygon shape;
private Color color;
private Point center;

public Territory(String name, Polygon shape, Color color) {
this.name = name;
this.shape = shape;
this.color = color;
calculateCenter();
}

private void calculateCenter() {
int sumX = 0;
int sumY = 0;
for (int i = 0; i < shape.npoints; i++) {
    sumX += shape.xpoints[i];
    sumY += shape.ypoints[i];
}
center = new Point(sumX / shape.npoints, sumY / shape.npoints);
}

public String getName() {
return name;
}

public boolean contains(Point p) {
return shape.contains(p);
}

public Point getCenter() {
return center;
}

public void draw(Graphics2D g2d, boolean isSelected) {
// Territorium mit Fläche füllen
g2d.setColor(color);
g2d.fill(shape);

// Territoriumsgrenzen zeichnen
if (isSelected) {
    g2d.setColor(new Color(255, 255, 0, 180)); // Gelbe Hervorhebung für Auswahl
    g2d.setStroke(new BasicStroke(2.5f));
} else {
    g2d.setColor(new Color(50, 50, 50, 160)); // Dunklere Linie für die Grenzen
    g2d.setStroke(new BasicStroke(1.0f));
}
g2d.draw(shape);

// Territoriumnamen zeichnen
g2d.setColor(new Color(30, 30, 30));
g2d.setFont(new Font("Arial", Font.BOLD, 10));

// Schatten für bessere Lesbarkeit
g2d.setColor(new Color(255, 255, 255, 120));
g2d.drawString(name, center.x - g2d.getFontMetrics().stringWidth(name) / 2 + 1, 
             center.y + 1);

// Eigentlicher Text
g2d.setColor(new Color(0, 0, 0, 200));
g2d.drawString(name, center.x - g2d.getFontMetrics().stringWidth(name) / 2, 
             center.y);
}
}
